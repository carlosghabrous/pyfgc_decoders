import importlib
import os
import re
import struct

from pyfgc_const import FGC_STATUS_SIZE

# Import all fgc_xy packages under classes and add the decode dunction to the dictionary

classes_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "classes")

try:
    decoders

except NameError: 
    decoders = dict()


# Import class specific decoders from autogenerated modules
common_module = importlib.import_module("pyfgc_decoders.classes.fgc_common")
decoders["common"] = common_module.decode

re_fn = re.compile("fgc_(\d+)[.]py")

for file_name in os.listdir(classes_path):
    m = re_fn.search(file_name)

    if (m):
        package = importlib.import_module("pyfgc_decoders.classes.fgc_" + m.group(1))
        decoders[int(m.group(1))] = package.decode


def decode(data, offset_udp_header_bytes=24):
    """Summary
    
    Args:
        data (TYPE): Description
        offset_udp_header_bytes (int, optional): Description
    
    Returns:
        TYPE: Description
    """

    # Represents the size of the fgc_udp_header plus time_sec and time_usec
    packet_length = len(data)
    num_devs = int((packet_length - offset_udp_header_bytes) / FGC_STATUS_SIZE)

    status = list()

    for i in range(num_devs):
        offset = i * FGC_STATUS_SIZE + offset_udp_header_bytes
        dev_data = data[offset : offset+FGC_STATUS_SIZE]

        class_id = dev_data[1]

        try:
            status.append(decoders[class_id](dev_data))

        except KeyError: 
            status.append(None)

    return status
